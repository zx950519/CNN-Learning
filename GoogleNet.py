from keras.layers import Input, Dense, Convolution2D, MaxPooling2D, AveragePooling2D, ZeroPadding2D, Dropout, Flatten
from keras.layers import merge, Reshape, Activation, Conv2D, GlobalAveragePooling2D
from keras.models import Model
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ModelCheckpoint, LearningRateScheduler, ReduceLROnPlateau
from keras.applications import InceptionV3
from keras.datasets import cifar10
from utils import *

import keras
import numpy as np

def getGoogleNetModel(nb_classes):

    # 获取系统自带的模型
    base_model = InceptionV3(weights='imagenet', include_top=False)
    # 构建全连接层
    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(1024, activation='relu')(x)
    predictions = Dense(nb_classes, activation='softmax')(x)
    # 完备模型
    model = Model(input=base_model.input, output=predictions)
    # first: train only the top layers (which were randomly initialized)
    # i.e. freeze all convolutional InceptionV3 layers
    for layer in base_model.layers:
        layer.trainable = False

    # # compile the model (should be done *after* setting layers to non-trainable)
    # print("starting model compile")
    # model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])
    # print("model compile done")
    return model

batch_size = 128    # 批处理大小
num_classes = 10    # 分类数
epoch = 50          # 迭代总数
data_augmentation = False       # 不使用数据增强
model_save_path = "./LeNet_model.json"    # 模型保存位置
weight_save_path = "./LeNet_weights.h5"   # 权重保存位置
checkpoint_path = "./model/GoogleNet_cifar10_model.{epoch:03d}.h5"  # 回调函数记忆点的保存位置
if __name__ == "__main__":

    # 加载数据
    (x_train, y_train), (x_test, y_test) = cifar10.load_data()
    # 转化为one-hot形式
    y_train = keras.utils.to_categorical(y_train, num_classes)
    y_test = keras.utils.to_categorical(y_test, num_classes)
    # 数据归一化
    x_train = x_train.astype('float32')
    x_test = x_test.astype('float32')
    x_train /= 255
    x_test /= 255

    model = getGoogleNetModel(10)
    # 采用RMSprop作为优化器
    opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)
    # 模型编译
    model.compile(loss='categorical_crossentropy',
                  optimizer=opt,
                  metrics=['accuracy'])
    model.summary()

    # 设置回调函数,用于中间模型保存和学习率调整,仅保存最优模型
    checkpoint = ModelCheckpoint(filepath=checkpoint_path,
                                 monitor='val_acc',
                                 verbose=1,
                                 save_best_only=True)
    # 学习率调度器
    lr_scheduler = LearningRateScheduler(lr_schedule)
    lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1),
                                   cooldown=0,
                                   patience=5,
                                   min_lr=0.5e-6)
    callbacks = [checkpoint, lr_reducer, lr_scheduler]

    if data_augmentation == True:
        # GoogleNet—Inecption 最小输入size为：150*150*3
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            zca_epsilon=1e-06,  # epsilon for ZCA whitening
            rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
            # randomly shift images horizontally (fraction of total width)
            width_shift_range=0.1,
            # randomly shift images vertically (fraction of total height)
            height_shift_range=0.1,
            shear_range=0.,  # set range for random shear
            zoom_range=0.,  # set range for random zoom
            channel_shift_range=0.,  # set range for random channel shifts
            # set mode for filling points outside the input boundaries
            fill_mode='nearest',
            cval=0.,  # value used for fill_mode = "constant"
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False,  # randomly flip images
            # set rescaling factor (applied before any other transformation)
            rescale=None,
            # set function that will be applied on each input
            preprocessing_function=(x_train.shape[0], 224, 224, 3),
            # image data format, either "channels_first" or "channels_last"
            data_format=None,
            # fraction of images reserved for validation (strictly between 0 and 1)
            validation_split=0.0)
        # Compute quantities required for feature-wise normalization
        # (std, mean, and principal components if ZCA whitening is applied).
        datagen.fit(x_train)
        # Fit the model on the batches generated by datagen.flow().
        model.fit_generator(datagen.flow(x_train, y_train,
                            batch_size=64),
                            epochs=10,
                            validation_data=(x_test, y_test),
                            workers=4,
                            callbacks=callbacks)
    else:
        model.fit(x_train, y_train,
                  batch_size=batch_size,
                  epochs=epoch,
                  verbose=1,
                  validation_data=(x_test, y_test))

    # 统计得分
    score = model.evaluate(x_test, y_test, verbose=0)
    print('Test loss:', score[0])
    print('Test accuracy:', score[1])

    # 保存模型及权重
    json_string = model.to_json()
    open(model_save_path, "w").write(json_string)
    model.save_weights(weight_save_path)